upstream frontend {
    server 127.0.0.1:8080;
}

upstream prerender {
    server 127.0.0.1:5000;
}

upstream backend {
    server 127.0.0.1:3000;
}

server {
    listen [::]:443 ssl http2 default_server ipv6only=off;

    server_name _;

    # Logs
    access_log off; # /var/www/logs/access.log combined buffer=16k;
    error_log /var/www/logs/error.log;

    # Allow Large Request Bodies
    client_max_body_size 30M;
    client_body_buffer_size 32k;

    # Remove NGINX Header
    server_tokens off;

    # Tell Browsers to Always Upgrade Requests to HTTPS
    add_header Strict-Transport-Security "max-age=31536000;" always;
    # Only Allow Embedding in Frames From the Same Site
    add_header X-Frame-Options sameorigin always;
    # Block MimeType Sniffing for Script & Style Tags
    add_header X-Content-Type-Options nosniff;
    # Tell Browsers to BLock XSS Attacks
    add_header X-XSS-Protection "1; mode=block";

    # Gzip Options
    gzip on;
    gzip_buffers 16 16k;
    gzip_comp_level 5;
    gzip_http_version 1.0;
    gzip_proxied any;
    gzip_types
        text/plain text/css
        application/json application/javascript text/javascript
        text/xml application/xml application/xml+rss
        application/x-font-ttf image/x-icon
        ;
    gzip_vary on;

    # SSL Configuration
{% if use_letsencrypt and ssl_cert_check.stat.exists %}
    ssl_certificate /etc/letsencrypt/live/{{ inventory_hostname }}/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/{{ inventory_hostname }}/privkey.pem;
{% else %}
    ssl_certificate /etc/ssl/certs/ssl-cert-snakeoil.pem;
    ssl_certificate_key /etc/ssl/private/ssl-cert-snakeoil.key;
{% endif %}
    #ssl_protocols TLSv1.1 TLSv1.2 TLSv1.3;
    #ssl_ciphers TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA:TLS_DHE_RSA_WITH_AES_256_CBC_SHA:TLS_DHE_RSA_WITH_AES_256_GCM_SHA384:TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384;
    #ssl_session_cache shared:SSL:10m;
    #ssl_ecdh_curve X25519:prime256v1:secp384r1;
    ssl_stapling on; # Requires nginx >= 1.3.7
    ssl_stapling_verify on; # Requires nginx => 1.3.7

    # For LetsEncrypt Certificate Verification
    location /.well-known {
        root /var/www/html;
    }

    # Fallback to Client's index.html
    location / {
        set $prerender 0;
        # But we added some user agents to this list
        if ($http_user_agent ~* "googlebot|bingbot|yandex|baiduspider|twitterbot|facebookexternalhit|rogerbot|linkedinbot|embedly|quora link preview|showyoubot|outbrain|pinterest\/0\.|pinterestbot|slackbot|vkShare|W3C_Validator|whatsapp|redditbot|discordbot|duckduckbot|slurp|exabot|facebot|ia_archiver|adsbot|bingpreview|google-structured-data-testing-tool|mediapartners-google|seobilitybot") {
            set $prerender 1;
        }
        if ($args ~ "_escaped_fragment_") {
            set $prerender 1;
        }
        if ($http_user_agent ~ "Prerender") {
            set $prerender 0;
        }
        if ($uri ~* "\.(js|css|xml|less|png|jpg|jpeg|gif|pdf|doc|txt|ico|rss|zip|mp3|rar|exe|wmv|doc|avi|ppt|mpg|mpeg|tif|wav|mov|psd|ai|xls|mp4|m4a|swf|dat|dmg|iso|flv|m4v|torrent|ttf|woff2?|svg|eot)") {
            set $prerender 0;
        }
        # And we ignore some known static directories
        if ($uri ~* "^/(blog|media|images|api|static|organic-certificates)") {
            set $prerender 0;
        }

        if ($prerender = 1) {
            rewrite ^ /prerender$request_uri last;
        }

        proxy_pass http://frontend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }

    location /prerender {
        internal;
        proxy_pass http://prerender;
        # Remove the /prerender prefix from the URI
        rewrite ^/prerender(.*) /$scheme://$host$1? break;
    }

    # Never cache the index.html file
    location = /index.html {
        expires -1;
        proxy_pass http://frontend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }

    # Serve Media from /var/www/media
    location ^~ /media {
        root /var/www;

        # Enable Chunked Data Copying Directly from File to Client
        sendfile on;
        sendfile_max_chunk 1m;
        # Include Response Headers with First Chunk
        tcp_nopush on;

        # Long-term Caching
        location ~* .(jpe?g|png|gif|ico|css|js|ttf|woff2?)$ {
            expires 365d;
            # Fix Double /media/ prefix
            rewrite ^/media(/media/.*)$ $1 permanent;
        }
    }

    # Proxy the API Server
    location /api/ {
        proxy_pass http://backend/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }

    # Redirect the Sitemap & Google Merchant Feed
    rewrite ^/sitemap.xml$ /api/sitemap.xml redirect;
    rewrite ^/sitemap-index.xml$ /api/sitemap-index.xml redirect;
    rewrite ^/merchant-feed.xml$ /api/merchant-feed.xml redirect;

    resolver "8.8.8.8";
    # Proxy the Offsite Wordpress Blog
    location ^~ /blog/ {
        proxy_pass https://blog.southernexposure.com/;
        proxy_set_header X-Forwarded-For $remote_addr;
        proxy_set_header X-Real-IP $remote_addr;
    }
    location ~* /blog/wp-content/(.*) {
        proxy_pass https://blog.southernexposure.com/wp-content/$1;
    }

    # Proxy the Old Images to the Old Server
    location ~* ^/images/(.*) {
        proxy_pass https://blog.southernexposure.com/wp-content/uploads/images/$1;
    }

    # Proxy the Newsletter Pages
    location ^~ /newsletter/ {
        proxy_pass https://blog.southernexposure.com/wp-content/uploads/newsletter/;
    }
    # Proxy the Catalog Pages
    location ^~ /catalog/ {
        proxy_pass https://blog.southernexposure.com/wp-content/uploads/catalog/;
    }

    # Proxy the Organic Certificates
    location ~* ^/organic-certificates/(.+)$ {
        proxy_pass https://blog.southernexposure.com/wp-content/uploads/organic-certificates/$1;
    }

    # Proxy the Growing Guide PDFs
    location ~* ^/growing-guides/(.+)$ {
        proxy_pass https://blog.southernexposure.com/wp-content/uploads/growing-guides/$1;
    }


    # Cache Static Assets for a Long Time
    location ~* .(jpe?g|png|gif|ico|css|js|ttf|woff2?)$ {
        proxy_pass http://frontend;
        expires 365d;
    }


    # Redirects for Old Site's URLs
    rewrite ^/[A-Za-z0-9-]+?-c-[0-9_]*?([0-9]+).html$ /api/redirects/category/$1 permanent;
    rewrite ^/[A-Za-z0-9-]+?-p-([0-9]+).html$ /api/redirects/product/$1 permanent;
    rewrite ^/[A-Za-z0-9-]+?-ezp-([0-9]+).html$ /api/redirects/page/$1 permanent;
    rewrite ^/contact_us.html$ /contact-us/ permanent;
    location = /index.php {
        if ($args ~* "main_page=quick_order") {
            set $args "";
            rewrite ^.*$ /quick-order/ permanent;
        }
        if ($args ~* "main_page=login") {
            set $args "";
            rewrite ^.*$ /account/login/ permanent;
        }
        if ($args ~* "main_page=create_account") {
            set $args "";
            rewrite ^.*$ /account/create/ permanent;
        }
        if ($args ~* "main_page=account") {
            set $args "";
            rewrite ^.*$ /account/ permanent;
        }
        if ($args ~* "main_page=advanced_search(&.*)?$") {
            set $args "";
            rewrite ^.*$ /search/advanced/ permanent;
        }
        if ($args ~* "main_page=advanced_search_result&.*?keyword=(?<query>[a-zA-Z0-9]+)") {
            set $args "";
            rewrite ^.*$ /search/?q=$query permanent;
        }
        if ($args ~* "main_page=page&id=(?<id>[0-9]+)") {
            set $args "";
            rewrite ^.*$ /api/redirects/page/$id permanent;
        }
        if ($args ~* "main_page=index&cPath=[0-9_]*?(?<id>[0-9]+)[^0-9_]*") {
            set $args "";
            rewrite ^.*$ /api/redirects/category/$id permanent;
        }
        if ($args ~* "main_page=product_info(&.*?)?&products_id=(?<id>[0-9]+)") {
            set $args "";
            rewrite ^.*$ /api/redirects/product/$id permanent;
        }
        if ($args ~* "main_page=products_all") {
            set $args "";
            rewrite ^.*$ /all-products/ permanent;
        }
        if ($args ~* "main_page=products_all&organic=1") {
            set $args "";
            rewrite ^.*$ /organic/ permanent;
        }
        if ($args ~* "main_page=products_all&heirloom=1") {
            set $args "";
            rewrite ^.*$ /heirloom/ permanent;
        }
        if ($args ~* "main_page=products_all&southern=1") {
            set $args "";
            rewrite ^.*$ /south-east/ permanent;
        }
        if ($args ~* "main_page=products_all&small-grower=1") {
            set $args "";
            rewrite ^.*$ /small-grower/ permanent;
        }
        rewrite ^.*$ / permanent;
    }
}

# Redirect all HTTP requests to HTTPS
server {
    listen [::]:80 default_server ipv6only=off;

    server_name _;

    # Tell Browsers to Always Upgrade Requests to HTTPS
    add_header Strict-Transport-Security "max-age=31536000;" always;
    # Only allow embedding in frames from the same site
    add_header X-Frame-Options "sameorigin;" always;

    return 302 https://$host$request_uri;
}

# vim: set ft=nginx synmaxcol=500 :
